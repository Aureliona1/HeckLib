{
    "PointDefinition": {
        "scope": "typescript",
        "prefix": "pointDef",
        "body": [
            "new PointDefinition(\"${1:name}\", [",
            "    $0",
            "]).push();"
        ],
        "description": "Creates the structure for a PointDefinition."
    },

    "AnimateComponent": {
        "scope": "typescript",
        "prefix": "animComponent",
        "body": [
            "new AnimateComponent(${1:time}, {",
            "    track: \"${2}\"",
            "    duration: ${3}",
            "    $0",
            "}).push();"
        ]
    },
    "AnimateTrack": {
        "scope": "typescript",
        "prefix": "animTrack",
        "body": [
            "new AnimateTrack(${1:time}, {",
            "    track: \"${2}\",",
            "    duration: ${3},",
            "    $0",
            "}).push();"
        ],
        "description": "Adds the structure for an AnimateTrack event"
    },
    "AssignPathAnimation": {
        "scope": "typescript",
        "prefix": "pathAnim",
        "body": [
            "new AssignPathAnimation(${1:time}, {",
            "    track: \"${2}\",",
            "    ${3}",
            "}).push();"
        ],
        "description": "Adds the structure for an AssignPathAnimation event"
    },
    "TrackParent": {
        "scope": "typescript",
        "prefix": "trackParent",
        "body": [
            "new AssignTrackParent(${1:time}, {",
            "    parentTrack: \"${2}\"",
            "    childrenTracks: [\"${3}\"]",
            "}).push();"
        ],
        "description": "Adds the structure for an AssignTrackParent event"
    },
    "PlayerTrack": {
        "scope": "typescript",
        "prefix": "playerTrack",
        "body": "new AssignPlayerToTrack(0, \"$0\").push();",
        "description": "Adds the structure for an AssignPlayerToTrack event"
    },
    "FogTrack": {
        "scope": "typescript",
        "prefix": "fogTrack",
        "body": "new AssignFogTrack(0, \"$0\").push();"
    },

    "Arc": {
        "scope": "typescript",
        "prefix": "arc",
        "body": [
            "new Arc({",
            "    // Arc data",
            "    time: ${1},",
            "    endTime: ${2}",
            "    $0",
            "}, {",
            "    // Custom data",
            "    ",
            "}, {",
            "    // Animation data",
            "    ",
            "}).push();"
        ]
    },
    "Chain": {
        "scope": "typescript",
        "prefix": "chain",
        "body": [
            "new Chain({",
            "    // Chain data",
            "    time: ${1}",
            "    endTime: ${2}",
            "    $0",
            "}, {",
            "    // Custom data",
            "    ",
            "}, {",
            "    // Animation data",
            "    ",
            "}).push();"
        ]
    },
    "Note": {
        "scope": "typescript",
        "prefix": "note",
        "body": [
            "new Note({",
            "    //Vanilla data",
            "    time: ${1:time}",
            "    $0",
            "}, {",
            "    //Custom data",
            "    ",
            "}, {",
            "    //Animation data",
            "    ",
            "}).push();"
        ],
        "description": "Adds the structure for a note"
    },
    "Wall": {
        "scope": "typescript",
        "prefix": "wall",
        "body": [
            "new Wall({",
            "    //Vanilla data",
            "    time: ${1:time}",
            "    $0",
            "}, {",
            "    //Custom data",
            "    ",
            "}, {",
            "    //Animation data",
            "    ",
            "}).push();"
        ],
        "description": "Adds the structure for a wall"
    },

    "NoteTrack": {
        "scope": "typescript",
        "prefix": "noteTrack",
        "body": "track(filter(notes, ${1:startTime}, ${2:endTime}), ${3:tracks});",
        "description": "Creates the function for adding tracks to notes between two time values."
    },
    "WallTrack": {
        "scope": "typescript",
        "prefix": "wallTrack",
        "body": "track(filter(walls, ${1:startTime}, ${2:endTime}), ${3:tracks});",
        "description": "Creates the function for adding tracks to notes between two time values."
    },
    "ArcTrack": {
        "scope": "typescript",
        "prefix": "arcTrack",
        "body": "track(filter(arcs, ${1:startTime}, ${2:endTime}), ${3:tracks});",
        "description": "Creates the function for adding tracks to arcs between two time values."
    },
    "ChainTrack": {
        "scope": "typescript",
        "prefix": "chainTrack",
        "body": "track(filter(chains, ${1:startTime}, ${2:endTime}), ${3:tracks});",
        "description": "Creates the function for adding tracks to chains between two time values."
    },

    //#region Filter Notes

    "FilterNotesDirection": {
        "scope": "typescript",
        "prefix": "filterNotesDirection",
        "body": [
            "filter(notes, ${1:startTime}, ${2:endTime}, {",
            "    direction: Note.Direction.$0",
            "});"
        ]
    },
    "FilterNotesType": {
        "scope": "typescript",
        "prefix": "filterNotesType",
        "body": [
            "filter(notes, ${1:startTime}, ${2:endTime}, {",
            "    type: Note.Type.$0",
            "});"
        ]
    },
    "FilterNotesX": {
        "scope": "typescript",
        "prefix": "filterNotesX",
        "body": [
            "filter(notes, ${1:startTime}, ${2:endTime}, {",
            "    x: $0",
            "});"
        ]
    },
    "FilterNotesY": {
        "scope": "typescript",
        "prefix": "filterNotesY",
        "body": [
            "filter(notes, ${1:startTime}, ${2:endTime}, {",
            "    y: $0",
            "});"
        ]
    },
    "FilterNotesXY": {
        "scope": "typescript",
        "prefix": "filterNotesXY",
        "body": [
            "filter(notes, ${1:startTime}, ${2:endTime}, {",
            "    x: ${3},",
            "    y: ${4}",
            "});",
            "$0"
        ]
    },
    "FilterNotes": {
        "scope": "typescript",
        "prefix": "filterNotes",
        "body": "filter(notes, ${1:startTime}, ${2:endTime});",
        "description": "Creates the function for filtering notes between two times."
    },

    // #endregion

    // #region Filter Walls
    "FilterWalls": {
        "scope": "typescript",
        "prefix": "filterWalls",
        "body": "filter(walls, ${1:startTime}, ${2:endTime});",
        "description": "Creates the function for filtering walls between two times."
    },
    "FilterWallsDuration": {
        "scope": "typescript",
        "prefix": "filterWallsDuration",
        "body": [
            "filter(notes, ${1:startTime}, ${2:endTime}, {",
            "    duration: $0",
            "});"
        ]
    },
    "FilterWallsX": {
        "scope": "typescript",
        "prefix": "filterWallsX",
        "body": [
            "filter(notes, ${1:startTime}, ${2:endTime}, {",
            "    x: $0",
            "});"
        ]
    },
    "FilterWallsY": {
        "scope": "typescript",
        "prefix": "filterWallsY",
        "body": [
            "filter(notes, ${1:startTime}, ${2:endTime}, {",
            "    y: $0",
            "});"
        ]
    },

    // #endregion
    
    "FilterArcs": {
        "scope": "typescript",
        "prefix": "filterArcs",
        "body": "filter(arcs, ${1:startTime}, ${2:endTime});",
        "description": "Creates the function for filtering arcs between two times."
    },
    "FilterChains": {
        "scope": "typescript",
        "prefix": "filterChains",
        "body": "filter(chains, ${1:startTime}, ${2:endTime});",
        "description": "Creates the function for filtering chains between two times."
    },

    "ForEachNote": {
        "scope": "typescript",
        "prefix": "forEachNote",
        "body": [
            "filter(notes, ${1:startTime}, ${2:endTime}).forEach((n: INote) => {",
            "    $0",
            "});"
        ],
        "description": "Creates a forEach loop for filtered notes."
    },
    "ForEachWall": {
        "scope": "typescript",
        "prefix": "forEachWall",
        "body": [
            "filter(walls, ${1:startTime}, ${2:endTime}).forEach((w: IWall) => {",
            "    $0",
            "});"
        ],
        "description": "Creates a forEach loop for filtered walls."
    },
    "ForEachArc": {
        "scope": "typescript",
        "prefix": "forEachArc",
        "body": [
            "filter(arcs, ${1:startTime}, ${2:endTime}).forEach((a: IArc) => {",
            "    $0",
            "});"
        ]
    },
    "ForEachChain": {
        "scope": "typescript",
        "prefix": "forEachChain",
        "body": [
            "filter(chains, ${1:startTime}, ${2:endTime}).forEach((c: IChain) => {",
            "    $0",
            "});"
        ]
    }
}